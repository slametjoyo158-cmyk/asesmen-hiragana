<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Game Jodohkan Daftar Mochimono</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;700&family=Noto+Sans+JP:wght@700&display=swap');
        
        /* Basic Styling */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8; /* Light Blue Gray Background */
            color: #1f2937;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 1rem;
        }

        /* Container for Centering */
        #game-container {
            max-width: 900px;
            width: 100%;
        }

        /* Card Styling */
        .card-panel {
            background-color: white;
            border-radius: 1.5rem;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            padding: 2rem;
        }

        /* List Item Card Styling (Match Item) */
        .match-item {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100px; /* Fixed height for consistent list look */
            border-radius: 0.75rem;
            margin-bottom: 0.75rem;
            cursor: pointer;
            transition: all 0.2s ease-in-out, background-color 0.1s; /* Added background transition */
            border: 2px solid #e5e7eb;
            user-select: none;
        }
        
        /* Text/Hiragana Styling */
        .match-item.hiragana {
            background-color: #ffffff;
            font-family: 'Noto Sans JP', sans-serif;
            font-size: 1.8rem;
            font-weight: 700;
            color: #1f2937;
            padding: 0.5rem 1rem;
        }

        /* Image Styling */
        .match-item.image {
            background-color: #f9fafb;
            padding: 0.5rem;
        }

        .match-item.image img {
            max-height: 90%;
            max-width: 90%;
            object-fit: contain;
            border-radius: 0.5rem;
        }

        /* Hover and Selected States */
        .match-item:not(.matched):hover {
            border-color: #6366f1; /* Indigo-500 */
            transform: scale(1.02);
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }

        .match-item.selected {
            border-color: #6366f1; /* Indigo-500 */
            background-color: #e0e7ff; /* Indigo-100 */
            transform: scale(1.03);
            box-shadow: 0 6px 10px -1px rgba(0, 0, 0, 0.1);
        }
        
        /* Matched State */
        .match-item.matched {
            pointer-events: none;
            background-color: #10b981; /* Emerald-500 (GREEN for correct) */
            color: white;
            border-color: #059669; /* Emerald-600 */
            opacity: 0.8;
            transform: none;
        }
        
        .match-item.matched img {
             /* Lighten matched images */
             filter: brightness(1.2); 
        }
        
        /* Match Grid Layout */
        #match-grid {
            /* Changed to 3 columns for better layout with 20 items on wide screens */
            display: grid;
            grid-template-columns: 1fr 1fr; 
            gap: 2rem;
        }
        
        /* Responsive Grid for smaller screens */
        @media (max-width: 640px) {
            #match-grid {
                grid-template-columns: 1fr; /* Stack on mobile */
                gap: 1rem;
            }
        }

        /* Modal Styling */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            display: none; /* Hidden by default */
            justify-content: center;
            align-items: center;
            z-index: 50;
        }
    </style>
</head>
<body>

    <!-- Main Game Container -->
    <div id="game-container">
        <!-- Login/Start Screen -->
        <div id="start-screen" class="card-panel text-center">
            <h1 class="text-4xl font-extrabold mb-4 text-indigo-600">Game: Jodohkan 20 Mochimono</h1>
            <p class="text-lg mb-6 text-gray-600">Cocokkan **20 kata Hiragana** di kiri dengan **Gambar** yang benar di kanan. Jawaban salah akan mengurangi skor.</p>
            <form id="start-form" class="space-y-4">
                <input type="text" id="player-name" placeholder="Masukkan Nama Anda" class="w-full px-4 py-3 border rounded-full text-center text-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-all" required>
                <button type="submit" class="w-full bg-indigo-600 text-white font-bold py-3 px-6 rounded-full hover:bg-indigo-700 transition-colors shadow-lg">Mulai Permainan</button>
            </form>
            <div id="login-message" class="mt-4 text-red-500 font-medium"></div>
        </div>

        <!-- Game Screen -->
        <div id="game-screen" class="card-panel hidden">
            <!-- Game Info (Score, Player Name) -->
            <div class="flex justify-between items-center mb-6 border-b pb-4">
                <div class="text-xl font-bold">Pemain: <span id="display-player-name" class="text-indigo-600"></span></div>
                <div class="text-2xl font-extrabold text-green-600">Skor: <span id="score-display">0</span></div>
            </div>

            <!-- Matching Grid -->
            <div id="match-grid">
                <div id="hiragana-list">
                    <h3 class="text-xl font-bold mb-4 text-indigo-700 border-b pb-2">Hiragana (Kata)</h3>
                    <!-- Hiragana items injected here -->
                </div>
                <div id="image-list">
                    <h3 class="text-xl font-bold mb-4 text-indigo-700 border-b pb-2">Gambar (Mochimono)</h3>
                    <!-- Image items injected here -->
                </div>
            </div>
            
            <div class="mt-6 flex justify-center space-x-4">
                <button id="restart-btn" class="bg-red-500 text-white font-bold py-2 px-6 rounded-full hover:bg-red-600 transition-colors shadow-md">Ulangi</button>
                <button id="main-menu-btn" class="bg-gray-500 text-white font-bold py-2 px-6 rounded-full hover:bg-gray-600 transition-colors shadow-md">Logout & Menu Utama</button>
            </div>
        </div>
    </div>
    
    <!-- Game Over Modal -->
    <div id="game-over-modal" class="modal">
        <div class="card-panel text-center p-8 w-11/12 md:w-1/2">
            <h2 class="text-4xl font-extrabold mb-4 text-indigo-600">🎉 Sempurna! 🎉</h2>
            <p class="text-xl text-gray-700 mb-6">Anda telah mencocokkan semua pasangan!</p>
            <div class="text-3xl font-bold mb-8">Skor Akhir: <span id="final-score" class="text-green-600">0</span></div>
            <button id="modal-restart-btn" class="w-full bg-indigo-600 text-white font-bold py-3 px-6 rounded-full hover:bg-indigo-700 transition-colors shadow-lg">Main Lagi</button>
        </div>
    </div>

    <!-- Firebase SDKs and Game Logic -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        import { setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // --- Firebase Configuration ---
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-match-game-id';
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        setLogLevel('debug');
        let app, auth, db;
        let userId = null;
        let isAuthReady = false;

        // Timer variable for inactivity logout
        let inactivityTimer;
        const INACTIVITY_TIMEOUT_MS = 60000; // 1 minute in milliseconds

        if (Object.keys(firebaseConfig).length > 0) {
            app = initializeApp(firebaseConfig);
            auth = getAuth(app);
            db = getFirestore(app);

            onAuthStateChanged(auth, async (user) => {
                if (!user) {
                    try {
                        if (initialAuthToken) {
                            await signInWithCustomToken(auth, initialAuthToken);
                        } else {
                            await signInAnonymously(auth);
                        }
                        userId = auth.currentUser.uid;
                    } catch (error) {
                        console.error("Error during authentication:", error);
                        // Fallback to anonymous sign-in if custom token fails
                        await signInAnonymously(auth);
                        userId = auth.currentUser.uid;
                    }
                } else {
                    userId = user.uid;
                }
                isAuthReady = true;
                console.log("Firebase Auth Ready. User ID:", userId);

                // Check for player name in localStorage to auto-start
                const storedPlayerName = localStorage.getItem('playerName');
                if (storedPlayerName) {
                    playerName = storedPlayerName;
                    document.getElementById('display-player-name').textContent = playerName;
                    showScreen('game');
                    startGame();
                } else {
                    showScreen('start');
                }
            });
        } else {
            console.error("Firebase not configured.");
            document.getElementById('login-message').textContent = "Kesalahan: Firebase tidak terkonfigurasi.";
        }

        // --- Game Data (20 Mochimono Pairs) ---
        const MOCHIMONO_PAIRS = [
            // 1. Existing 6 with uploaded images
            { matchId: 'hon', hiragana: 'ほん', imageAsset: 'image_adc6da.png', imageAlt: 'Buku' },
            { matchId: 'enpitsu', hiragana: 'えんぴつ', imageAsset: 'image_b85cf6.png', imageAlt: 'Pensil' },
            { matchId: 'keshigomu', hiragana: 'けしごむ', imageAsset: 'image_ae45ff.png', imageAlt: 'Penghapus' },
            { matchId: 'kasa', hiragana: 'かさ', imageAsset: 'image_b84610.png', imageAlt: 'Payung' },
            { matchId: 'kaban', hiragana: 'かばん', imageAsset: 'image_b858d4.png', imageAlt: 'Tas' },
            { matchId: 'tokei', hiragana: 'とけい', imageAsset: 'image_ae5cc4.png', imageAlt: 'Jam' },
            
            // 2. New 14 classroom/personal items (using blue placeholders)
            { matchId: 'tsukue', hiragana: 'つくえ', imageAsset: 'placeholder', imageAlt: 'Meja' },
            { matchId: 'isu', hiragana: 'いす', imageAsset: 'placeholder', imageAlt: 'Kursi' },
            { matchId: 'no-to', hiragana: 'ノート', imageAsset: 'placeholder', imageAlt: 'Buku Catatan' },
            { matchId: 'pen', hiragana: 'ペン', imageAsset: 'placeholder', imageAlt: 'Pulpen' },
            { matchId: 'jisho', hiragana: 'じしょ', imageAsset: 'placeholder', imageAlt: 'Kamus' },
            { matchId: 'hasami', hiragana: 'はさみ', imageAsset: 'placeholder', imageAlt: 'Gunting' },
            { matchId: 'monosashi', hiragana: 'ものさし', imageAsset: 'placeholder', imageAlt: 'Penggaris' },
            { matchId: 'kokuban', hiragana: 'こくばん', imageAsset: 'placeholder', imageAlt: 'Papan Tulis' },
            { matchId: 'kami', hiragana: 'かみ', imageAsset: 'placeholder', imageAlt: 'Kertas' },
            { matchId: 'gakkou', hiragana: 'がっこう', imageAsset: 'placeholder', imageAlt: 'Sekolah' },
            { matchId: 'jitensha', hiragana: 'じてんしゃ', imageAsset: 'placeholder', imageAlt: 'Sepeda' },
            { matchId: 'shashin', hiragana: 'しゃしん', imageAsset: 'placeholder', imageAlt: 'Foto' },
            { matchId: 'saihu', hiragana: 'さいふ', imageAsset: 'placeholder', imageAlt: 'Dompet' },
            { matchId: 'kagi', hiragana: 'かぎ', imageAsset: 'placeholder', imageAlt: 'Kunci' }
        ];

        // --- Game State Variables ---
        let playerName = '';
        let score = 0;
        let selectedHiragana = null; 
        let selectedImage = null;    
        let matchesFound = 0;
        const totalMatches = MOCHIMONO_PAIRS.length;
        const SCORE_CORRECT = 10;
        const SCORE_INCORRECT = 5;

        // --- UI Elements ---
        const startScreen = document.getElementById('start-screen');
        const gameScreen = document.getElementById('game-screen');
        const startForm = document.getElementById('start-form');
        const playerNameInput = document.getElementById('player-name');
        const displayPlayerName = document.getElementById('display-player-name');
        const scoreDisplay = document.getElementById('score-display');
        const hiraganaList = document.getElementById('hiragana-list');
        const imageList = document.getElementById('image-list');
        const gameOverModal = document.getElementById('game-over-modal');
        const finalScoreDisplay = document.getElementById('final-score');
        const restartBtn = document.getElementById('restart-btn');
        const modalRestartBtn = document.getElementById('modal-restart-btn');
        const mainMenuBtn = document.getElementById('main-menu-btn');

        // --- Helper Functions ---

        /**
         * Shuffles an array in place using the Fisher-Yates algorithm.
         * @param {Array} array 
         */
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }

        /**
         * Switches between the start and game screens.
         * @param {string} screenId - 'start' or 'game'
         */
        function showScreen(screenId) {
            if (screenId === 'start') {
                startScreen.classList.remove('hidden');
                gameScreen.classList.add('hidden');
            } else if (screenId === 'game') {
                startScreen.classList.add('hidden');
                gameScreen.classList.remove('hidden');
            }
        }

        /**
         * Renders the separate lists for Hiragana and Images.
         * @param {Array} pairs - The array of matching pairs.
         */
        function renderLists(pairs) {
            hiraganaList.innerHTML = '<h3 class="text-xl font-bold mb-4 text-indigo-700 border-b pb-2">Hiragana (Kata)</h3>';
            imageList.innerHTML = '<h3 class="text-xl font-bold mb-4 text-indigo-700 border-b pb-2">Gambar (Mochimono)</h3>';

            // Create separate shuffled lists for display
            const hiraganaItems = shuffleArray(pairs.map(p => ({ matchId: p.matchId, value: p.hiragana, type: 'hiragana' })));
            const imageItems = shuffleArray(pairs.map(p => ({ matchId: p.matchId, asset: p.imageAsset, alt: p.imageAlt, type: 'image' })));
            
            // Render Hiragana List
            hiraganaItems.forEach(item => {
                const el = document.createElement('div');
                el.className = 'match-item hiragana';
                el.dataset.matchId = item.matchId;
                el.dataset.type = 'hiragana';
                el.textContent = item.value;
                el.onclick = () => handleItemClick(el);
                hiraganaList.appendChild(el);
            });

            // Render Image List
            imageItems.forEach(item => {
                const el = document.createElement('div');
                el.className = 'match-item image';
                el.dataset.matchId = item.matchId;
                el.dataset.type = 'image';
                
                const img = document.createElement('img');
                
                if (item.asset === 'placeholder') {
                    // Placeholder for new items (using a neutral blue placeholder)
                    img.src = `https://placehold.co/100x100/3B82F6/FFFFFF?text=${item.alt}`; 
                } else {
                    // Use uploaded image for existing items
                    img.src = item.asset;
                }
                
                img.alt = item.alt;
                img.onerror = function() {
                    // Fallback if asset is missing (red placeholder)
                    this.src = `https://placehold.co/100x100/FF0000/FFFFFF?text=${item.alt}`; 
                };
                el.appendChild(img);

                el.onclick = () => handleItemClick(el);
                imageList.appendChild(el);
            });
        }

        /**
         * Resets the selection state (unselects both elements).
         */
        function resetSelection() {
            if (selectedHiragana) {
                selectedHiragana.classList.remove('selected');
                selectedHiragana.style.backgroundColor = ''; // Reset inline color
            }
            if (selectedImage) {
                selectedImage.classList.remove('selected');
                selectedImage.style.backgroundColor = ''; // Reset inline color
            }
            selectedHiragana = null;
            selectedImage = null;
        }

        /**
         * Handles the click on any match item.
         * @param {HTMLElement} itemEl - The clicked item element.
         */
        function handleItemClick(itemEl) {
            // Reset the inactivity timer when there is interaction
            resetInactivityTimer();
            
            if (itemEl.classList.contains('matched')) {
                return;
            }

            // 1. Determine the type of the clicked item
            const itemType = itemEl.dataset.type;

            if (itemType === 'hiragana') {
                // If a Hiragana item is already selected, unselect it
                if (selectedHiragana) {
                    selectedHiragana.classList.remove('selected');
                }
                
                // Select the new Hiragana item
                selectedHiragana = itemEl;
                selectedHiragana.classList.add('selected');
                
                // If an image is also selected, check for a match immediately
                if (selectedImage) {
                    checkForMatch();
                }
            } else if (itemType === 'image') {
                // If an Image item is already selected, unselect it
                if (selectedImage) {
                    selectedImage.classList.remove('selected');
                }

                // Select the new Image item
                selectedImage = itemEl;
                selectedImage.classList.add('selected');

                // If a Hiragana is also selected, check for a match immediately
                if (selectedHiragana) {
                    checkForMatch();
                }
            }
        }
        
        /**
         * Checks if the currently selected pair matches.
         */
        function checkForMatch() {
            if (!selectedHiragana || !selectedImage) {
                return; 
            }

            const hiraganaMatchId = selectedHiragana.dataset.matchId;
            const imageMatchId = selectedImage.dataset.matchId;

            if (hiraganaMatchId === imageMatchId) {
                // --- Match Found: CORRECT (+10) ---
                selectedHiragana.classList.add('matched');
                selectedImage.classList.add('matched');

                score += SCORE_CORRECT;
                scoreDisplay.textContent = score;

                matchesFound++;
                
                setTimeout(() => {
                    resetSelection();
                    if (matchesFound === totalMatches) {
                        endGame();
                    }
                }, 300); 

            } else {
                // --- No Match: INCORRECT (-5) ---
                score = Math.max(0, score - SCORE_INCORRECT); // Deduct, but score cannot go below 0
                scoreDisplay.textContent = score;

                // Briefly show wrong selection by making them red before resetting
                selectedHiragana.style.backgroundColor = '#fca5a5'; // Tailwind red-300
                selectedImage.style.backgroundColor = '#fca5a5'; 
                
                setTimeout(() => {
                    resetSelection(); 
                }, 700);
            }
        }


        /**
         * Resets game state and starts a new game.
         */
        function startGame() {
            // Reset state
            score = 0;
            matchesFound = 0;
            resetSelection();
            
            scoreDisplay.textContent = score;
            
            // Render lists
            renderLists([...MOCHIMONO_PAIRS]);
            // Start the inactivity timer monitoring
            resetInactivityTimer();
        }

        /**
         * Handles game completion.
         */
        async function endGame() {
            finalScoreDisplay.textContent = score;
            gameOverModal.style.display = 'flex';
            
            // Stop inactivity timer
            clearTimeout(inactivityTimer);
            
            // Save score to Firestore
            if (isAuthReady && db && userId) {
                try {
                    await addDoc(collection(db, `artifacts/${appId}/users/${userId}/scores`), {
                        username: playerName,
                        level: 'Mochimono Jodohkan Daftar 20 Kata', 
                        score: score,
                        totalQuestions: totalMatches * SCORE_CORRECT, // Max theoretical score
                        timestamp: new Date().toISOString()
                    });
                    console.log("Skor game berhasil disimpan ke Firestore.");
                } catch (e) {
                    console.error("Error saving game score: ", e);
                }
            } else {
                console.warn("Firestore tidak siap. Skor game tidak disimpan.");
            }
        }
        
        // --- Inactivity/Visibility Logic ---

        /**
         * Logs out the user and reloads the page.
         */
        function forceLogoutAndReload() {
            // Only perform action if we are currently logged in (playerName is set)
            if (localStorage.getItem('playerName')) {
                console.log("Sesi berakhir karena tidak aktif selama 1 menit. Logout dan muat ulang.");
                localStorage.removeItem('playerName');
                window.location.reload(); 
            }
        }
        
        /**
         * Resets and restarts the inactivity timer.
         */
        function resetInactivityTimer() {
            clearTimeout(inactivityTimer);
            if (document.hidden) {
                // Only start the timer if the tab is currently hidden
                inactivityTimer = setTimeout(forceLogoutAndReload, INACTIVITY_TIMEOUT_MS);
            }
        }

        /**
         * Handles the visibility change event (tab switching).
         */
        document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
                // Tab is hidden (switched away) - START the logout timer
                resetInactivityTimer();
            } else {
                // Tab is active (switched back) - STOP the timer
                clearTimeout(inactivityTimer);

                // If the player name was removed during the hidden state, force reload
                if (!localStorage.getItem('playerName') && gameScreen.classList.contains('hidden') === false) {
                     // The `beforeunload` already handles removing the name, but this handles the case 
                     // where the timer ran out while the tab was hidden.
                     forceLogoutAndReload(); 
                }
            }
        });


        // --- Event Listeners ---
        
        // Handle page unload to clear player session (logout on tab exit/refresh)
        window.addEventListener('beforeunload', () => {
            // This ensures the player starts from the beginning on the next load
            localStorage.removeItem('playerName');
        });


        // Handle Login/Start Form Submission
        startForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const inputName = playerNameInput.value.trim();
            
            if (inputName) {
                playerName = inputName;
                localStorage.setItem('playerName', playerName);
                displayPlayerName.textContent = playerName;
                showScreen('game');
                startGame();
            }
        });
        
        // Handle Game Over Modal Close/Restart
        modalRestartBtn.addEventListener('click', () => {
            gameOverModal.style.display = 'none';
            startGame();
        });

        // Handle Restart Button
        restartBtn.addEventListener('click', () => {
            startGame();
        });
        
        // Handle Main Menu Button (explicit logout)
        mainMenuBtn.addEventListener('click', () => {
            // Clear timer on explicit logout
            clearTimeout(inactivityTimer);
            localStorage.removeItem('playerName');
            playerName = '';
            playerNameInput.value = '';
            showScreen('start');
        });

    </script>
</body>
</html>
